# -*- tcl -*-

package require tcltest
package require yajltcl
package require json
package require huddle

namespace import ::tcltest::*

namespace eval ::yajl::test {

	proc dotest {json} {
		set json_obj [yajl create #auto -beautify 0]
		set yajlstr [$json_obj parse $json]
		$json_obj delete

		set huddle [::yajl::json2huddle $json]
		if {![huddle isHuddle $huddle]} {
			puts " *** ERROR: isHuddle failed ***"
			return 0
		}
		
		set json [huddle jsondump $huddle "" ""]
		
		set json_obj [yajl create #auto -beautify 0]
		set yajlstr2 [$json_obj parse $json]
		$json_obj delete
		
		if {$yajlstr2 != $yajlstr} {
			puts "YAJL:\t\t$yajlstr"
			puts "YAJL2:\t\t$yajlstr2"
			puts "HUDDLE:\t\t$huddle"
			puts " *** ERROR: mismatch ***"
			return 0
		} else {
			return 1
		}
	}

#set aa [huddle create 123 577 3453]
#set aa [huddle create a b c d]
#set aa [huddle create a 123 b 123 c 12 ]

#puts "--------------"
#set aa [huddle list 123 123 12 ]
#puts $aa
#puts "--------------"

	test 1.01 {: Simple list
	} -body {
		dotest {[123, 577, 3453]}
	} -result 1

	test 1.02 {: Simple array with a nested list
	} -body {
		dotest {{"moo": [123, 4576, 789], "cow": "moooo"}}
	} -result 1

	test 1.03 {: Mixed array with lists and nested arrays
	} -body {
		dotest {{"moo": [123, 4576, 789], "cow": "moooo", "complex": {"alfa" : "a", "bravo": "b", "charlie" : "c", "delta"  : "d" }}}
	} -result 1

	# TODO: this test currently fails
	test 1.04 {: Array with null element
	} -body {
		dotest {{"moo": "cow", "pig": "oink", "rabbit" : null}}
	} -result 1


	test 1.05 {: example from the yajl-tcl README file.
	} -body {
		dotest {{
    "type": "FeatureCollection",
	"features": [
				 {
					 "type": "Feature",
					 "geometry": {
                                "type": "Point",
						 "coordinates": [
                                        -106.6091944,
										35.0401944
										]
					 },
					 "properties": {
						 "label": "KABQ"
					 }
				 },
				 {
                        "type": "Feature",
					 "geometry": {
                                "type": "Point",
						 "coordinates": [
                                        -118.3586667,
                                        34.206667
										]
					 },
					 "properties": {
                                "label": "KBUR"
					 }
				 }
				 ]
		}}
	} -result 1

	
	test 1.06 {: example from "man n json" (tcllib)
	} -body {
		dotest {[
		 {
              "precision": "zip",
              "Latitude":  37.7668,
              "Longitude": -122.3959,
              "Address":   "",
              "City":      "SAN FRANCISCO",
              "State":     "CA",
              "Zip":       "94107",
              "Country":   "US"
		 },
		 {
              "precision": "zip",
              "Latitude":  37.371991,
              "Longitude": -122.026020,
              "Address":   "",
              "City":      "SUNNYVALE",
              "State":     "CA",
              "Zip":       "94085",
              "Country":   "US"
		 }
		 ]
}
	} -result 1


	
	test 1.07 {: example from "man n json" (tcllib)
	} -body {
		dotest {{
	"Image": {
               "Width":  800,
               "Height": 600,
               "Title":  "View from 15th Floor",
		"Thumbnail": {
                   "Url":    "http://www.example.com/image/481989943",
                   "Height": 125,
                   "Width":  "100"
		},
		"IDs": [116, 943, 234, 38793]
	}
		}}
	} -result 1

	# HUDDLE {D {A {b true}}}
	test 1.08 {: basic types boolean
	} -body {
		dotest {{"key": true}}
	} -result 1

	# HUDDLE {D {A {num 42}}}
	test 1.09 {: basic types integer
	} -body {
		dotest {{"key": 42}}
	} -result 1

	# HUDDLE {D {A null}}
	test 1.11 {: basic types null
	} -body {
		dotest {{"key": null}}
	} -result 1
}

cleanupTests
